/*Problem statement
Tower of Hanoi is a mathematical puzzle where we have three rods and n disks. The objective of the puzzle is to move all disks from source rod to destination rod using third rod (say auxiliary). The rules are :

1) Only one disk can be moved at a time.
2) A disk can be moved only if it is on the top of a rod.
3) No disk can be placed on the top of a smaller disk.
Print the steps required to move n disks from source rod to destination rod.

Source Rod is named as 'a', auxiliary rod as 'b' and destination rod as 'c'.

Detailed explanation ( Input/output format, Notes, Images )
Constraints :
0 <= n <= 20
Sample Input 1 :
2
Sample Output 1 :
a b
a c
b c
Sample Input 2 :
3
Sample Output 2 :
a c
a b
c b
a c
b a
b c
a c*/
public class Main {
	public static void main(String[] args) {
    	Solution solution = new Solution();
    	int N = 3; // Change N to the number of disks you want to use
    	long total_moves = solution.toh(N, 1, 3, 2);
    	System.out.println("Total moves: " + total_moves);
	}
}
class Solution{

	public long toh(int disks, int source, int destination, int auxiliary) {
    	if (disks == 1) {
        	System.out.println("move disk 1 from rod " + source + " to rod " + destination);
        	return 1;
    	}

    	long count1 = toh(disks - 1, source, auxiliary, destination);
    	System.out.println("move disk " + disks + " from rod " + source + " to rod " + destination);
    	long count2 = toh(disks - 1, auxiliary, destination, source);

    	return count1 + count2 + 1;
	}
}
