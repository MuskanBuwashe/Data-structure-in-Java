/*Problem statement
Given two strings, 'S' and 'T' with lengths 'M' and 'N', find the length of the 'Longest Common Subsequence'.

For a string 'str'(per se) of length K, the subsequences are the strings containing characters in the same relative order as they are present in 'str,' but not necessarily contiguous. Subsequences contain all the strings of length varying from 0 to K.

Example :
Subsequences of string "abc" are:  ""(empty string), a, b, c, ab, bc, ac, abc.
Detailed explanation ( Input/output format, Notes, Images )
Constraints :
0 <= M <= 10 ^ 3
0 <= N <= 10 ^ 3

Time Limit: 1 sec
Sample Input 1 :
adebc
dcadb
Sample Output 1 :
3
Explanation of the Sample Output 1 :
Both the strings contain a common subsequence 'adb', which is the longest common subsequence with length 3. 
Sample Input 2 :
ab
defg
Sample Output 2 :
0
Explanation of the Sample Output 2 :
The only subsequence that is common to both the given strings is an empty string("") of length 0.*/
import java.util.Arrays;

public class Solution {
    public static int lcs(String s, String t) {
        int[][] dp = new int[s.length()][t.length()];

        // Fill the dp Array with -1 which signifies none of the states have been computed.
        for (int i = 0; i < s.length(); i++) {
            Arrays.fill(dp[i], -1);
        }

        return lcsHelper(s, s.length(), t, t.length(), dp);
    }

    private static int lcsHelper(String s, int n, String t, int m, int[][] dp) {
        // If the length of first string is zero, we don't have any common subsequence
        if (m == 0) {
            return 0;
        }

        // If the length of second string is zero, we don't have any common subsequence
        if (n == 0) {
            return 0;
        }

        // If already computed the answer for this state, we simply return it.
        if (dp[n - 1][m - 1] != -1) {
            return dp[n - 1][m - 1];
        }

        if (s.charAt(n - 1) != t.charAt(m - 1)) {
            /*
                 If the mth character of str1 is not equal to the nth character of str2,
                 we return the maximum of answers obtained by
                 1. Ignoring the nth character in the first string
                 2. Ignoring the mth character in the second string
            */
            return dp[n - 1][m - 1] = Math.max(
                    lcsHelper(s, n - 1, t, m, dp),
                    lcsHelper(s,  n, t,m - 1, dp));
        } else {
            /*
                 If the nth character of str1 is equal to the mth character of str2,
                 this character will be included in the subsequence.
                 Hence, we will add 1 to the length of lcs obtained
                 removing the mth character from the first string and the
                 nth character from the second string.
             */
            return dp[n - 1][m - 1] =
                    1 + lcsHelper(s, n - 1, t,  m - 1, dp);
        }
    }
}
