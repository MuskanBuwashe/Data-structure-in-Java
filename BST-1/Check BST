/*Problem statement
Given a binary tree with N number of nodes, check if that input tree is BST (Binary Search Tree). If yes, return true, return false otherwise.

Note:
Duplicate elements should be kept in the right subtree.
Detailed explanation ( Input/output format, Notes, Images )
Constraints :
0 <= Number of edges <= 10^5
Time Limit: 1 second
Sample Input 1 :
3 1 5 -1 2 -1 -1 -1 -1


Sample Output 1 :
true
Sample Input 2 :
5 2 10 0 1 -1 15 -1 -1 -1 -1 -1 -1


Sample Output 2 :
false*/
import java.util.*;
import java.lang.Math;
public class Solution {
  public static boolean isBST(BinaryTreeNode<Integer> root) {
         if(root==null)
                return true;
            int max=maximum(root.left);
            int min=minimum(root.right);
            if(root.data<=max || root.data>min)
                return false;

            boolean ans1=isBST(root.left);
            boolean ans2=isBST(root.right);
            return(ans1&& ans2);

        }
        public static int maximum(BinaryTreeNode<Integer> root)
        {
            if(root==null)
                return Integer.MIN_VALUE;
            return Math.max(root.data,Math.max(maximum(root.left),maximum(root.right)));


            }
        public static int minimum(BinaryTreeNode<Integer> root)
        {
            if(root==null)
                return Integer.MAX_VALUE;
            return Math.min(root.data,Math.min(minimum(root.left),minimum(root.right)));
        }

    }


class Pair<T,U> {
  public  T first;
   public U second;
    public Pair(T first,U second)
    {        
        this.first=first;
        this.second=second;
    }

}
