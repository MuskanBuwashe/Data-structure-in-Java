/*Problem statement
You have been given a singly linked list of integers along with an integer 'N'. Write a function to append the last 'N' nodes towards the front of the singly linked list and returns the new head to the list.

Hint:
Identify how many pointers you require and try traversing them to right places and connect nodes accordingly also don't forget to disconnect what's required else it could create cycles.
Detailed explanation ( Input/output format, Notes, Images )
Constraints :
1 <= t <= 10^2
0 <= M <= 10^5
0 <= N < M
Time Limit: 1sec

Where 'M' is the size of the singly linked list.
Remember/Consider :
While specifying the list elements for input, -1 indicates the end of the singly linked list and hence, would never be a list element.
Sample Input 1 :
2
1 2 3 4 5 -1
3
10 20 30 40 50 60 -1
5
Sample Output 1 :
3 4 5 1 2
20 30 40 50 60 10
Sample Input 2 :
1
10 6 77 90 61 67 100 -1
4
Sample Output 2 :
90 61 67 100 10 6 77 
 Explanation to Sample Input 2 :
We have been required to move the last 4 nodes to the front of the list. Here, "90->61->67->100" is the list which represents the last 4 nodes. When we move this list to the front then the remaining part of the initial list which is, "10->6->77" is attached after 100. Hence, the new list formed with an updated head pointing to 90.*/

public class Solution {


    // Function to append the last N nodes to the beginning of the linked list
    public static Node appendLastNToFirst(Node head, int n) {
        if (head == null || n <= 0) {
            return head; // Invalid input
        }

        // Find the length of the linked list
        int length = 0;
        Node current = head;
        while (current != null) {
            length++;
            current = current.next;
        }

        // Check if the value of n is valid
        if (n > length) {
            return head; // Invalid input, n is greater than the length of the list
        }

        // Traverse the list to the node before the new head
        int position = length - n - 1;
        current = head;
        for (int i = 0; i < position; i++) {
            current = current.next;
        }

        // Save the new head and the node after it
        Node newHead = current.next;
        Node nodeAfterNewHead = newHead.next;

        // Disconnect the new head from the rest of the list
        current.next = null;

        // Traverse to the end of the list and connect it to the original head
        current = newHead;
        while (current.next != null) {
            current = current.next;
        }
        current.next = head;

        // Update the head to the new head
        head = newHead;

        return head;
    }

    // Function to print the linked list
    public static void printList(Node head) {
        Node current = head;
        while (current != null) {
            System.out.print(current.data + " ");
            current = current.next;
        }
        System.out.println();
    }

    public static void main(String[] args) {
        // Example linked list
        Node head = new Node(1);
        head.next = new Node(2);
        head.next.next = new Node(3);
        head.next.next.next = new Node(4);
        head.next.next.next.next = new Node(5);

        // Number of nodes to append to the front
        int n = 2;

        // Print the original linked list
        System.out.println("Original Linked List:");
        printList(head);

        // Append the last N nodes to the front
        head = appendLastNToFirst(head, n);

        // Print the modified linked list
        System.out.println("Linked List with Last " + n + " Nodes Appended to First:");
        printList(head);
    }
}
