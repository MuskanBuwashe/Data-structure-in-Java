/*Problem statement
Given the 'start' and the 'end'' positions of the array 'input'. Your task is to sort the elements between 'start' and 'end' using quick sort.



Note :
Make changes in the input array itself.
Detailed explanation ( Input/output format, Notes, Images )
Sample Input 1 :
6 
2 6 8 5 4 3
Sample Output 1 :
2 3 4 5 6 8
Sample Input 2 :
5
1 2 3 5 7
Sample Output 2 :
1 2 3 5 7 
Constraints :
1 <= N <= 10^3
0 <= input[i] <= 10^9*/
public class Solution {
    public static void quickSort(int[] input) {
        quickSort(input,0,input.length-1);

    }
    public static void quickSort(int[] input,int startIndex,int endIndex){
    //base case
       if(startIndex>=endIndex)
           return;
        
        int pivotPos=partition(input,startIndex,endIndex);
        quickSort(input,startIndex,pivotPos-1);
        quickSort(input,pivotPos+1,endIndex);
    }
    public static int partition(int input[],int startIndex,int endIndex)
    {
        int pivot=input[startIndex];
        int count=0;
        for(int i=startIndex+1;i<=endIndex;i++)
        {
            if(input[i]<=pivot)
                count++;
        }
        int pivotPos=startIndex+count;
        int temp=input[startIndex];
        input[startIndex]=input[pivotPos];
        input[pivotPos]=temp;
        int i=startIndex;
        int j=endIndex;
        while(i<pivotPos && j>pivotPos)
        {
            if(input[i]<=input[pivotPos])
                i++;
            else if(input[j]>input[pivotPos])
                j--;
            else
            {
                int temp_=input[i];
                input[i]=input[j];
                input[j]=temp_;
                i++;j--;
                
            }
        }
        return pivotPos;
    }
        
        
        
        
}
